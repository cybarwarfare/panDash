{"version":3,"sources":["img/PANTO.png","config.js","Screen/UserListScreen/UserListScreen.js","Screen/PayOutScreen/PayOutScreen.js","component/navigater.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fire","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","UserListScreen","props","fetchFun","a","state","status","database","ref","on","snapshot","list","forEach","snap","push","val","console","log","setState","values","columns","title","field","width","headerFilter","this","className","style","height","backgroundColor","fontSize","color","type","src","require","data","tooltips","layout","React","Component","child","SalesScreen","isLoading","csv","label","key","headers","filename","Navigater","basename","alt","to","pathname","activeStyle","data-toggle","data-placement","exact","path","component","PayOutScreen","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cba1cbc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PANTO.2d18a2c8.png\";","import * as firebase from 'firebase';\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyC7eJxRa_gcFbm-TUXyjAtIbdDDXNEELb0\",\r\n    authDomain: \"pantonative.firebaseapp.com\",\r\n    databaseURL: \"https://pantonative.firebaseio.com\",\r\n    projectId: \"pantonative\",\r\n    storageBucket: \"pantonative.appspot.com\",\r\n    messagingSenderId: \"1039842864855\",\r\n    appId: \"1:1039842864855:web:1632a877f509408d40ca92\",\r\n    measurementId: \"G-TJZ46LWZPR\"\r\n};\r\nvar fire = firebase.initializeApp(config);\r\nexport default fire;","import React from \"react\";\r\nimport firebase from \"../../config\";\r\n// import 'react-tabulator/lib/styles.css';\r\nimport { ReactTabulator } from \"react-tabulator\";\r\n// import { CSVLink } from \"react-csv\";\r\n\r\nclass UserListScreen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      values: [],\r\n      columns: [\r\n        { title: \"ID\", field: \"id\", width: 100},\r\n        { title: \"Email\", field: \"Email\",headerFilter: \"input\"},\r\n        { title: \"First Name\", field: \"FirstName\", },\r\n        { title: \"Last Name\", field: \"LastName\", },\r\n        { title: \"Phone\", field: \"Phone\", },\r\n        { title: \"Total Revenue\", field: \"totalMoney\", },\r\n        { title: \"Revenue\", field: \"payMoney\", },\r\n        { title: \"Referal count\", field: \"totalRefaral\", },\r\n        { title: \"Downline count\", field: \"refaral_refaral_count\", },\r\n      ],\r\n      status:false,\r\n      // csv: [\r\n      //   { label: \"ID\", key: \"id\"},\r\n      //   { label: \"Email\", key: \"Email\"},\r\n      //   { label: \"First Name\", key: \"FirstName\" },\r\n      //   { label: \"Last Name\", key: \"LastName\" },\r\n      //   { label: \"Phone\", key: \"Phone\" },\r\n      //   { label: \"Total Revenue\", key: \"totalMoney\"},\r\n      //   { label: \"Revenue\", key: \"payMoney\" },\r\n      //   { label: \"Wallet\", key: \"wallMoney\" }\r\n      // ]\r\n    };\r\n  }\r\n  async componentDidMount() {\r\n    console.log(\"mounded\");\r\n    await this.setState({status: true});\r\n    await this.fetchFun()\r\n  }\r\n  componentWillUnmount(){\r\n    console.log(\"unmounded\");\r\n    this.setState({status: false});\r\n  }\r\n\r\n    fetchFun = async() =>{\r\n      if(this.state.status == true){\r\n        await firebase.database().ref('users').on('value', snapshot =>{\r\n          let list =[];\r\n          snapshot.forEach(snap =>{\r\n              list.push(snap.val());\r\n          });\r\n          console.log(list);\r\n          this.setState({values: list});\r\n      })\r\n      }else{\r\n        return\r\n      }\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      // <div className=\"d-flex justify-content-center align-items-start\" style={{width:'95vw',height:'100vh',backgroundColor:'#f6f7fb'}}>\r\n      //   <div className=\"bg-primary col-12 d-flex justify-content-end align-items-center\"style={{height:60}}>\r\n      //     <div type=\"button\" className=\"rounded-circle d-flex justify-content-center align-items-center\" style={{width:40,height:40,backgroundColor:''}}>\r\n      //           <img src={require('../../img/PANTO.png')} style={{width:20}}></img>\r\n      //     </div>\r\n      //   </div>\r\n        \r\n      // </div>\r\n      <div className=\"d-flex justify-content-start align-items-start flex-column\" style={{width:'95vw',height:'100vh',backgroundColor:'#f6f7fb'}}>\r\n        <div className=\"bg-primary d-flex justify-content-between align-items-center\" style={{width:'95vw',height:60}}>\r\n          <span className=\"font-weight-bold pl-4\" style={{fontSize:20,color:'white'}}>USER LIST</span>\r\n        <div type=\"button\" className=\"rounded-circle d-flex justify-content-center align-items-center mr-4\" style={{width:40,height:40,backgroundColor:'white'}}>\r\n            <img src={require('../../img/PANTO.png')} style={{width:20}}></img>\r\n        </div>\r\n        </div>\r\n          <ReactTabulator\r\n          style={{width:'100%'}}\r\n          className=\"bg-primary\"\r\n          data={this.state.values}\r\n          columns={this.state.columns}\r\n          tooltips={true}\r\n          layout={\"fitData\"}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default UserListScreen;\r\n","import React from 'react';\r\nimport firebase from \"../../config\";\r\nimport { CSVLink } from \"react-csv\";\r\n// import 'react-tabulator/lib/styles.css';\r\nimport { React15Tabulator } from \"react-tabulator\";\r\n\r\nvar fire = firebase.database().ref('Payout').child('Details');\r\nclass SalesScreen extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            values: [],\r\n            isLoading: false,\r\n            columns: [\r\n              { title: \"RazorpayX Account Number\", field: \"RazorpayX_Account_Number\"},\r\n              { title: \"Payout_Amount\", field: \"Payout_Amount\"},\r\n              { title: \"Payout Currency\", field: \"Payout_Currency\" },\r\n              { title: \"Payout Mode\", field: \"Payout_Mode\" },\r\n              { title: \"Payout Purpose\", field: \"Payout_Purpose\" },\r\n              { title: \"Payout Narration\", field: \"Payout_Narration\" },\r\n              { title: \"Payout Reference Id\", field: \"Payout_Reference_Id\" },\r\n              { title: \"Fund Account Id\", field: \"Fund_Account_Id\" },\r\n              { title: \"Fund Account Type\", field: \"Fund_Account_Type\" },\r\n              { title: \"Fund Account Name\", field: \"Fund_Account_Name\" },\r\n              { title: \"Fund Account Ifsc\", field: \"Fund_Account_Ifsc\" },\r\n              { title: \"Fund Account Number\", field: \"Fund_Account_Number\" },\r\n              { title: \"Fund Account Vpa\", field: \"Fund_Account_Vpa\" },\r\n              { title: \"Contact Type\", field: \"Contact_Type\" },\r\n              { title: \"Contact Name\", field: \"Contact_Name\" },\r\n              { title: \"Contact Email\", field: \"Contact_Email\" },\r\n              { title: \"Contact Mobile\", field: \"Contact_Mobile\" },\r\n              { title: \"Contact Reference Id\", field: \"Contact_Reference_Id\" },\r\n              { title: \"notes place\", field: \"notes_place\" },\r\n              { title: \"notes code\", field: \"notes_code\" },\r\n            ],\r\n            csv: [\r\n                { label: \"RazorpayX Account Number\", key: \"RazorpayX_Account_Number\"},\r\n                { label: \"Payout_Amount\", key: \"Payout_Amount\"},\r\n                { label: \"Payout Currency\", key: \"Payout_Currency\" },\r\n                { label: \"Payout Mode\", key: \"Payout_Mode\" },\r\n                { label: \"Payout Purpose\", key: \"Payout_Purpose\" },\r\n                { label: \"Payout Narration\", key: \"Payout_Narration\" },\r\n                { label: \"Payout Reference Id\", key: \"Payout_Reference_Id\" },\r\n                { label: \"Fund Account Id\", key: \"Fund_Account_Id\" },\r\n                { label: \"Fund Account Type\", key: \"Fund_Account_Type\" },\r\n                { label: \"Fund Account Name\", key: \"Fund_Account_Name\" },\r\n                { label: \"Fund Account Ifsc\", key: \"Fund_Account_Ifsc\" },\r\n                { label: \"Fund Account Number\", key: \"Fund_Account_Number\" },\r\n                { label: \"Fund Account Vpa\", key: \"Fund_Account_Vpa\" },\r\n                { label: \"Contact Type\", key: \"Contact_Type\" },\r\n                { label: \"Contact Name\", key: \"Contact_Name\" },\r\n                { label: \"Contact Email\", key: \"Contact_Email\" },\r\n                { label: \"Contact Mobile\", key: \"Contact_Mobile\" },\r\n                { label: \"Contact Reference Id\", key: \"Contact_Reference_Id\" },\r\n                { label: \"notes place\", key: \"notes_place\" },\r\n                { label: \"notes code\", key: \"notes_code\" },\r\n              ],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fire.on('value', snapshot =>{\r\n            let list =[];\r\n            snapshot.forEach(snap =>{\r\n                list.push(snap.val());\r\n            });\r\n            console.log(list);\r\n            this.setState({values: list});\r\n        })\r\n      }\r\n    render(){\r\n        return(\r\n            <div className=\"d-flex justify-content-start align-items-start flex-column\" style={{width:'95vw',height:'100vh',backgroundColor:'#f6f7fb'}}>\r\n            <div className=\"bg-primary d-flex justify-content-between align-items-center\" style={{width:'95vw',height:60}}>\r\n              <span className=\"font-weight-bold pl-4\" style={{fontSize:20,color:'white'}}>PAY OUT</span>\r\n            <div type=\"button\" className=\"rounded-circle d-flex justify-content-center align-items-center mr-4\" style={{width:40,height:40,backgroundColor:'white'}}>\r\n                <img src={require('../../img/PANTO.png')} style={{width:20}}></img>\r\n            </div>\r\n            </div>\r\n            <div className=\"d-flex flex-row justify-content-between align-content-center pt-2 pb-2 bg-primary\" style={{width:'95vw'}}>\r\n                <div className=\"d-flex flex-row pl-3 justify-content-center align-items-center\">\r\n                    <div type=\"button\" className=\"p-2\" style={{backgroundColor:'white',}}>\r\n                        <span className=\"font-weight-bold text-primary\" style={{color:'white'}}>Current PayOut</span>\r\n                    </div>\r\n                    <div type=\"button\" className=\"p-2\" style={{backgroundColor:'#f6f7fb',}}>\r\n                        <span className=\"font-weight-bold text-primary\" style={{color:'blue'}}>PayOut History</span>\r\n                    </div>\r\n                </div>\r\n                <CSVLink data={this.state.values} headers={this.state.csv} filename={\"payment.csv\"} className=\"mr-3 text-primary d-flex justify-content-center align-items-center p-2\" style={{backgroundColor:'white'}}>\r\n                    <span className=\"font-weight-bolder\">Download CSV</span>\r\n                </CSVLink>\r\n            </div>\r\n              <React15Tabulator\r\n              style={{width:'100%'}}\r\n              className=\"bg-primary\"\r\n              data={this.state.values}\r\n              columns={this.state.columns}\r\n              tooltips={true}\r\n              layout={\"fitData\"}\r\n            />\r\n          </div>\r\n        )\r\n    }\r\n}\r\nexport default SalesScreen;\r\n\r\n {/* <div className=\"d-flex col-12 bg-primary flex-row justify-content-between align-items-center p-3\">\r\n                    <div>\r\n                        <span className=\"font-weight-bolder\" style={{color:'white'}}>Panto Dashboard</span>\r\n                    </div>\r\n                    <div type=\"button\" onClick={()=>{this.SignOut()}}>\r\n                        <span className=\"font-weight-bolder\" style={{color:'white'}}>Sign Out</span>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"col-12 d-flex justify-content-end m-2\">\r\n                <CSVLink data={this.state.values} headers={this.state.csv} filename={\"payment.csv\"} className=\"btn btn-primary\" onClick={()=>this.handleCSV()}>\r\n                    Download CSV\r\n                </CSVLink>\r\n                </div>\r\n                <div className=\"d-flex col-12 bg-primary p-0 m-0\">\r\n                    <React15Tabulator\r\n                    data={this.state.values}\r\n                    columns={this.state.columns}\r\n                    tooltips={true}\r\n                    layout={\"fitColumns\"}/>\r\n                </div> */}","import React from 'react';\r\nimport './styles.css';\r\nimport { Route, Switch, NavLink,HashRouter } from 'react-router-dom';\r\n// import DashScreen from \"../Screen/DashScreen/DashScreen\";\r\nimport UserListScreen from \"../Screen/UserListScreen/UserListScreen\";\r\nimport PayOutScreen from \"../Screen/PayOutScreen/PayOutScreen\"\r\n\r\nclass Navigater extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n       <HashRouter basename=\"/\">\r\n        <div className=\"wrapper d-flex\">\r\n          <div className=\"sidebar\">\r\n            <div className=\"sidebar-header d-flex justify-content-center align-items-center\">\r\n              <img src={require('../img/PANTO.png')} alt=\"\" className=\"logo\" />\r\n            </div>\r\n            <ul className=\"list-unstyled components d-flex flex-column align-items-center mt-5\">\r\n              {/* <li className=\"sidebar-opt mb-4\">\r\n                <NavLink className=\"sidebarlink nav-link p-3 fa fa-slack text-primary\" exact  to={{ pathname: `/` }} activeStyle={{ color: 'white' }} data-toggle=\"tooltip\" data-placement=\"right\" title=\"DashBoard\" />\r\n              </li> */}\r\n              <li className=\"sidebar-opt mb-4\">\r\n                <NavLink className=\"sidebarlink nav-link p-3 fa fa-lastfm text-primary\" to={{ pathname: `/` }} activeStyle={{ color: 'white' }} data-toggle=\"tooltip\" data-placement=\"right\" title=\"User List\" />\r\n              </li>\r\n              <li className=\"sidebar-opt mb-4\">\r\n                <NavLink className=\"sidebarlink nav-link p-3 fa fa-credit-card-alt text-primary\" to={{ pathname: `/payOut` }} activeStyle={{ color: 'white' }} data-toggle=\"tooltip\" data-placement=\"right\" title=\"Lead\" />\r\n              </li> \r\n            </ul>\r\n          </div>\r\n          <div>\r\n            <Switch>\r\n            {/* <Route exact  path=\"/\" component={DashScreen}/> */}\r\n            <Route exact path=\"/\"component={UserListScreen}/>\r\n            <Route path=\"/payOut\" component={PayOutScreen}/>\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navigater;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"tabulator-tables/dist/css/tabulator.min.css\";\nimport Navigator from \"./component/navigater\";\n\n\nfunction App() {\n  return (\n    <>\n      <Navigator></Navigator>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}